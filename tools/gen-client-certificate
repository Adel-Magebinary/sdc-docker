#!/bin/sh
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
#

#
# Copyright (c) 2015, Joyent, Inc.
#

# Generates a self-signed client certificate from an existing SSH private key
#
# This is a development tool that doesn't assume the existence of CloudAPI.
# The private key provided needs to belong to an existing SDC user that
# has already added his public key to UFDS. Eventually a tool similar to this
# one will be adapted to Public Cloud tools such as node-smartdc.

if [[ -n "$TRACE" ]]; then
    export PS4='[\D{%FT%TZ}] ${BASH_SOURCE}:${LINENO}: ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
    set -o xtrace
fi
set -o errexit
set -o pipefail

SDC_DOCKER_CERT_PATH=$HOME/.sdc_docker
KEY_PATH=$SDC_DOCKER_CERT_PATH/key.pem
CERT_PATH=$SDC_DOCKER_CERT_PATH/cert.pem
CSR_PATH=$SDC_DOCKER_CERT_PATH/csr.pem

HN=$1
ssh_key=$2
if [[ -z "$HN" || -z "$ssh_key" ]]; then
    echo 'gen-client-certificate: error: missing arguments'
    echo ''
    echo 'Usage:'
    echo '    ./tools/gen-client-certificate HN path-to-private-key'
    echo ''
    echo 'Examples:'
    echo '    $ ./tools/gen-client-certificate root@10.99.99.7 ~/.ssh/id_rsa # COAL'
    exit 1
fi

echo "* Creating sdc-docker certificate directory at $SDC_DOCKER_CERT_PATH"
mkdir -p $SDC_DOCKER_CERT_PATH

echo "* Generating PEM private key from SSH private key"
openssl rsa -in $ssh_key -outform pem > $KEY_PATH

echo "* Generating self-signed certificate request...\n"
echo " Make sure to provide a valid SDC username as the certificate Common"
echo " Name (CN). The certificate CN will be used to identify and match the"
echo " client certificate with an existing SDC user.\n"
echo "Press any key to continue."
read key
openssl req -new -key $KEY_PATH -out $CSR_PATH

echo "* Generating client certificate"
openssl x509 -req -days 365 -in $CSR_PATH -signkey $KEY_PATH -out $CERT_PATH

# Get docker0 IP: the external if it has one, else the first one.
IP=$(ssh $HN "vmadm lookup -j alias=docker0 | json -ae 'ext = this.nics.filter(function (nic) { return nic.nic_tag === \"external\"; })[0]; this.ip = ext ? ext.ip : this.nics[0].ip;' ip")
DOCKER_HOST=tcp://$IP:2376

echo "sdc-docker certificate has been generated at $CERT_PATH"
echo "Now, export the following environment variables:\n"
echo "export DOCKER_CERT_PATH=$SDC_DOCKER_CERT_PATH/"
echo "export DOCKER_HOST=$DOCKER_HOST\n"

echo "Use docker with TLS support by running 'docker --tls'.\n"
echo "Make sure to activate TLS support on your sdc-docker instance at $IP"
